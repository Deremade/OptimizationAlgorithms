Error found at [GeneticAlgorithm.java, crisscross method] would attem0pt to access elements from a nonexitant index
Fixed to ensure that if a solution does not have a place code it will go to the next solution

____________________________________________
[GeneticAglorthm.java]
public default <S extends OptimizationSolution<E>> S crisscross(Collection<S> parents) {
		 S newSolution = SolutionMethods.getRandom(parents).emptySolution();
		 LinkedList<S> ll = makeList(parents);
		 int index = 0;
		 S currSolution = ll.get(0);
		 Collection<String> codes = SolutionMethods.placeCodes(parents);
		 for(String code : codes) {
			 currSolution = ll.get(index % ll.size());
			 while(!currSolution.hasPlaceCode(code)) {
				 ll.remove(currSolution);
				 if(ll.isEmpty()) ll = makeList(parents);
				 currSolution = ll.get(index % ll.size());
			 }
			System.out.println(currSolution.getElm(code) + " "+code);
			newSolution.placeElm(currSolution.getElm(code), code);
			index++;
		 }
		 return newSolution;
	}
public static void main(String[] args) throws InterruptedException {
		NumericAlgorithm<Integer> na = new NumericAlgorithm<Integer>(1, new CircleProblem<Integer>(), 10);
		na.setBounds(-10, 10, 1);
		
		na.generateSolutions(2);
		
		na.setGeneticAlgorithm(crossover.Crisscross, SelectionMethod.topSurvivors(5), SolutionMatcher.randomMatching(3));
		
		System.out.println(na.solutions());
		System.out.println(
				na.evolutionary_algorithm.crisscross(na.solutions())
		);
		
				
	}
____________________________________________
[[-3, 6, 1, 2, -2, 10, 0, 5, 7, 0], [-10, -2, 0, 5, -5, -10, 8, -5, -4, 3]]
-3 0
-2 1
1 2
5 3
-2 4
-10 5
0 6
-5 7
7 8
3 9
[-3, -2, 1, 5, -2, -10, 0, -5, 7, 3, -5]
__________________________________________________
public default <S extends OptimizationSolution<E>> S crisscross(Collection<S> parents) {
		 S newSolution = SolutionMethods.getRandom(parents).emptySolution();
			System.out.println(newSolution);
		 LinkedList<S> ll = makeList(parents);
		 int index = 0;
		 S currSolution = ll.get(0);
		 Collection<String> codes = SolutionMethods.placeCodes(parents);
		 for(String code : codes) {
			 currSolution = ll.get(index % ll.size());
			 while(!currSolution.hasPlaceCode(code)) {
				 ll.remove(currSolution);
				 if(ll.isEmpty()) ll = makeList(parents);
				 currSolution = ll.get(index % ll.size());
			 }
			System.out.println(currSolution.getElm(code) + " "+code);
			newSolution.placeElm(currSolution.getElm(code), code);
			System.out.println(newSolution);
			index++;
		 }
		 return newSolution;
	}
____________________________________________
[[-10, -6, -5, 9, -4, -6, 4, 8, 2, -9], [-8, -8, -1, -10, -8, -7, 1, 6, 2, -7]]
[]
[]
-10 0
[-10, 0]
[-10, 0]
-8 1
[-10, -8, 0]
[-10, -8, 0]
-5 2
[-10, -8, -5, 0]
[-10, -8, -5, 0]
-10 3
[-10, -8, -5, -10, 0]
[-10, -8, -5, -10, 0]
-4 4
[-10, -8, -5, -10, -4, 0]
[-10, -8, -5, -10, -4, 0]
1 6
[-10, -8, -5, -10, -4, 0, 1, -1]
[-10, -8, -5, -10, -4, 0, 1, -1]
8 7
[-10, -8, -5, -10, -4, 0, 1, 8, -1]
[-10, -8, -5, -10, -4, 0, 1, 8, -1]
2 8
[-10, -8, -5, -10, -4, 0, 1, 8, 2, -1]
[-10, -8, -5, -10, -4, 0, 1, 8, 2, -1]
-9 9
[-10, -8, -5, -10, -4, 0, 1, 8, 2, -9, -1]
[-10, -8, -5, -10, -4, 0, 1, 8, 2, -9, -1]
-7 5
[-10, -8, -5, -10, -4, -7, 0, 1, 8, 2, -9, -1]
[-10, -8, -5, -10, -4, -7, 0, 1, 8, 2, -9, -1]
_____________________________________________
No more placeElm, not setElm
[[-4, -3, 2, 7, -6, 4, 1, -1, -9, -7], [-7, 4, -10, -6, -5, 1, 6, 0, 2, -8]]
[]
-4 0
[-4]
4 1
[-4, 4]
2 2
[-4, 4, 2]
-6 3
[-4, 4, 2, -6]
-6 4
[-4, 4, 2, -6, -6]
1 5
[-4, 4, 2, -6, -6, 1]
1 6
[-4, 4, 2, -6, -6, 1, 1]
0 7
[-4, 4, 2, -6, -6, 1, 1, 0]
-9 8
[-4, 4, 2, -6, -6, 1, 1, 0, -9]
-8 9
[-4, 4, 2, -6, -6, 1, 1, 0, -9, -8]
[-4, 4, 2, -6, -6, 1, 1, 0, -9, -8]
_____________________________________________
NumericAlgorithm<Integer> na = new NumericAlgorithm<Integer>(1, new CircleProblem<Integer>(), 10);
		na.setBounds(-10, 10, 1);
		
		na.generateSolutions(2);
		
		na.setGeneticAlgorithm(crossover.Crisscross, SelectionMethod.topSurvivors(5), SolutionMatcher.randomMatching(3));
		
		System.out.println(na.solutions());
		System.out.println(
				na.evolutionary_algorithm.randomCrossover(na.solutions())
		);
_____________________________________________
[[-10, -6, 2, 1, 5, 0, 10, 2, 3, -9], [10, 10, 7, 8, -9, -6, 0, -5, 9, 4]]
[-10, -6, 7, 8, -9, -6, 10, -5, 3, 4]
______________________________________________
System.out.println(
				na.evolutionary_algorithm.splitDifferenceCrossover(na.solutions())
		);
____________________________________________
[[0, -8, 3, 4, -6, -6, -6, -6, -4, -9], [-8, 0, -7, 3, 6, -9, 2, -5, -4, 4]]
[-4, 4, -5, 0, 6, -1, 4, 0, 0, 6]
______________________________________________
System.out.println(
				na.evolutionary_algorithm.randomSplit(na.solutions())
		);
public default <S extends OptimizationSolution<E>> S randomSplit(Collection<S> parents) {
		S newSolution = SolutionMethods.getRandom(parents).emptySolution();
		 for(String code : SolutionMethods.placeCodes(parents)) {
			 Collection<E> elms = SolutionMethods.getElms(code, parents);
			 Collection<E> splitElms = new LinkedList<E>();
			 while(splitElms.isEmpty())
				 for(E elm : elms)
					 if(Math.random() > 0.5)
						 splitElms.add(elm);
			 System.out.println(splitElms +" "+split(splitElms));
			 newSolution.setElm(split(splitElms), code);
		 }
		 return newSolution;
	}
______________________________________________
[[-8, -7, 4, 10, 3, 0, 4, 8, 10, 7], [-6, -1, 3, -6, 9, 1, 10, -9, 9, 3]]
[-8, -6] 1
[-1] -1
[4] 4
[-6] -6
[3, 9] 3
[1] 1
[-9] -9
[7] 7
[10] 10
[1, -1, 4, -6, 3, 1, 10, -9, -6, 7]
___________________________________________
Changed so that the split() method added the old average
___________________________________________
[[-2, 8, 6, 5, -3, -2, 1, -3, -2, -7], [10, 1, 8, 10, 6, -4, -5, 3, -7, 5]]
[-2] -2
[8] 8
[8] 8
[5, 10] 7
[6] 6
[1] 1
[-7, 5] -1
[-2] -2
[-3, 3] 0
[-7] -7
[-2, 8, 8, 7, 6, -2, 1, 0, -7, -1]
__________________________________________
System.out.println(
				na.evolutionary_algorithm.splitDifferenceCrossover(na.solutions())
		);
____________________________________________
[[-10, 6, 2, 5, -8, 8, 5, -7, -7, -4], [-8, 5, -1, 9, 4, -7, 8, -5, 1, -9]]
[-9, 6, 1, 7, -2, 1, 6, -6, -3, -6]
_____________________________________________
System.out.println(
				na.evolutionary_algorithm.randomCrossover(na.solutions())
		);
