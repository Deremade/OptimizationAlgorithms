NumericAlgorithm<Double> na = new NumericAlgorithm<Double>(1, new CircleProblem<Double>(), 3);
		na.setAlgType(1);
		na.generateSolutions(10);
		na.setParticleSwarmOpt(1, 0.25, 0.25, 0.25, 0.25);
		na.setGeneticAlgorithm(1, SelectionMethod.topGroups(1, SolutionMatcher.closest(na.vo, 3)), SolutionMatcher.randomMatching(2));
		
		
		System.out.println(na.displaySolutions());
			na.iteration();
		System.out.println(na.displaySolutions());

		public default  <S extends OptimizationSolution<E>> S closest(Collection<S> sample, S sol) {
		S closest = null;
		double closestDistance= 0;
		sample.remove(sol);
		if(sample.isEmpty()) return sol;
		for(S candidate : sample)
			if(closest == null) {
				closest = candidate;
				closestDistance = distance(sol, candidate);
			} else
			 if(distance(sol, candidate) < closestDistance) {
					closest = candidate;
					closestDistance = distance(sol, candidate);
				}
		System.out.println(closest.solutionDetails() +" "+closestDistance);
		sample.add(sol);
		return closest;
	}
	
		public <E, S extends OptimizationSolution<E>> void subjectToSelection(Collection<S> population) {
		Collection<S> survivors = new LinkedList<S>();
		for(Collection<S> group : matcher.genMatches(population)) {
			for(S sol : group)
				System.out.print(sol.solutionDetails()+" ");
			survivors.addAll(mostFit(group, winners));
			System.out.println("-");
		}
		population.clear();
		population.addAll(survivors);
	}

	
______________________________________________________________________________________
< [ 7,-8,-3 ] -11, [ -4,5,8 ] -10, [ -5,1,10 ] -11, [ 6,6,-4 ] -9, [ -1,-5,2 ] -5, [ -5,-3,0 ] -6, [ -9,-2,-2 ] -9, [ 4,-1,3 ] -5, [ 0,-2,-2 ] -3, [ -4,7,-8 ] -11>
 [ 7,-8,-3 ] -11 0.0
 [ -4,5,8 ] -10 0.0
 [ -5,1,10 ] -11 0.0
 [ 6,6,-4 ] -9 0.0
 [ -1,-5,2 ] -5 0.0
 [ -9,-2,-2 ] -9 0.0
 [ 4,-1,3 ] -5 0.0
 [ 0,-2,-2 ] -3 0.0
 [ 7,5,-3 ] -9 0.0
 [ -5,-5,10 ] -12 0.0
 [ 6,6,-2 ] -9 0.0
 [ -5,-5,10 ] -12 0.0
 [ 7,-8,-3 ] -11  [ -4,5,8 ] -10  [ -5,1,10 ] -11  [ -5,-3,0 ] -6 -
 [ 6,6,-4 ] -9  [ -1,-5,2 ] -5  [ -9,-2,-2 ] -9  [ -4,7,-8 ] -11 -
 [ 4,-1,3 ] -5  [ 0,-2,-2 ] -3  [ 7,5,-3 ] -9  [ -5,7,0 ] -9 -
 [ -5,-5,10 ] -12  [ 6,6,-2 ] -9  [ -5,-5,10 ] -12  [ 4,-2,3 ] -5 -
< [ -4,5,8 ] -10, [ -5,-3,0 ] -6, [ 6,6,-4 ] -9, [ -1,-5,2 ] -5, [ 4,-1,3 ] -5, [ 0,-2,-2 ] -3, [ 6,6,-2 ] -9, [ 4,-2,3 ] -5>
__________________________________________________________________________________
public default  <S extends OptimizationSolution<E>> S closest(Collection<S> sample, S sol) {
		S closest = null;
		sample.remove(sol);
		if(sample.isEmpty()) return sol;
		for(S candidate : sample)
			if(closest == null) 
				closest = candidate;
			 else
			 if(distance(sol, candidate) < distance(sol, candidate))  
					closest = candidate;
		sample.add(sol);
		return closest;
	}
_______________________________________________________________________________
< [ -7,7,-1 ] -10, [ -6,5,-2 ] -8, [ -8,5,-8 ] -12, [ -2,-7,-9 ] -12, [ 8,-3,10 ] -13, [ 4,-8,7 ] -11, [ 4,2,2 ] -5, [ 2,-1,2 ] -3, [ 3,9,-9 ] -13, [ 1,-4,-4 ] -6>
 [ -7,7,-1 ] -10  [ -6,5,-2 ] -8  [ -8,5,-8 ] -12  [ 2,2,9 ] -9 -
 [ -2,-7,-9 ] -12  [ 8,-3,10 ] -13  [ 4,2,2 ] -5  [ 4,-8,7 ] -11 -
 [ 2,-1,2 ] -3  [ 3,9,-9 ] -13  [ -7,5,-1 ] -9  [ 1,-4,-4 ] -6 -
 [ -6,-7,-2 ] -9  [ 4,2,7 ] -8  [ 2,9,2 ] -9  [ -8,-8,5 ] -12 -
 [ 2,2,-1 ] -3  [ 8,-4,10 ] -13  [ 8,-4,10 ] -13  [ 8,-4,10 ] -13 -
< [ 2,2,9 ] -9, [ -6,5,-2 ] -8, [ 4,-8,7 ] -11, [ 4,2,2 ] -5, [ 1,-4,-4 ] -6, [ 2,-1,2 ] -3, [ 2,9,2 ] -9, [ 4,2,7 ] -8, [ 8,-4,10 ] -13, [ 2,2,-1 ] -3>

FOUND : Forgot to define the solutionLength in NemericAlgorithm
____________________________________________________________________________

public <E, S extends OptimizationSolution<E>> void subjectToSelection(Collection<S> population) {
		Collection<S> survivors = new LinkedList<S>();
		for(Collection<S> group : matcher.genMatches(population)) {
			System.out.println(group);
			survivors.addAll(mostFit(group, winners));
		}
		population.clear();
		population.addAll(survivors);
	}

Main.java :
		na.setGeneticAlgorithm(1, SelectionMethod.topGroups(1, SolutionMatcher.closest(na.vo, 3)), SolutionMatcher.randomMatching(2));
_____________________________________________________________________________
< [ 8,3,9 ] -12, [ 9,2,-4 ] -10, [ 4,0,6 ] -7, [ -10,8,-2 ] -13, [ -7,-6,-6 ] -11, [ -1,-1,1 ] -2, [ 9,-3,-6 ] -11, [ 7,6,1 ] -9, [ 7,-8,4 ] -11, [ -9,-8,-10 ] -16>
[[-9, -8, -10], [-9, -8, -10], [9, 2, -4]]
[[-10, 8, -2], [-10, 8, -2], [7, -3, 1]]
[[8, 3, 9], [8, 3, 9], [-7, -6, -6]]
[[-1, -1, -2], [-1, -1, -2], [7, -8, 4]]
[[8, -6, 9], [8, -6, 9], [7, 6, 1]]
[[9, -3, -6], [9, -3, -6], [4, 0, 6]]
[[9, 0, -4], [9, 0, -4], [-1, -1, 1]]
< [ 9,2,-4 ] -10, [ 7,-3,1 ] -8, [ -7,-6,-6 ] -11, [ -1,-1,-2 ] -2, [ 7,6,1 ] -9, [ 4,0,6 ] -7, [ -1,-1,1 ] -2>
_________________________________________________________________________________
Main.java
		na.setGeneticAlgorithm(1, SelectionMethod.topGroups(1, SolutionMatcher.bestWorst()), SolutionMatcher.randomMatching(2));
SelectionMethod.java : TopGrouped
public <E, S extends OptimizationSolution<E>> void subjectToSelection(Collection<S> population) {
		Collection<S> survivors = new LinkedList<S>();
		for(Collection<S> group : matcher.genMatches(population)) {
			for(S sol : group)
				System.out.print(sol.solutionDetails());
			System.out.println(" ");
			survivors.addAll(mostFit(group, winners));
		}
		population.clear();
		population.addAll(survivors);
	}
_______________________________________________________________________________
< [ 5,3,-7 ] -9, [ -1,7,-4 ] -8, [ -2,0,-2 ] -3, [ -9,-10,-2 ] -14, [ 9,7,-5 ] -12, [ -4,7,8 ] -11, [ 6,-6,7 ] -11, [ 9,-5,2 ] -10, [ -8,-8,10 ] -15, [ -1,9,6 ] -11>
 [ -8,-8,10 ] -15 [ -2,-2,0 ] -3 
 [ -8,-8,10 ] -15 [ -2,0,-2 ] -3 
 [ -9,-10,-2 ] -14 [ -1,3,-4 ] -5 
 [ -9,-10,-2 ] -14 [ -1,3,-4 ] -5 
 [ 9,7,-5 ] -12 [ -1,7,-4 ] -8 
 [ 9,7,-5 ] -12 [ -1,7,-4 ] -8 
 [ 9,-6,-5 ] -12 [ 5,3,-7 ] -9 
 [ 9,-6,-5 ] -12 [ 5,3,-7 ] -9 
 [ -4,7,8 ] -11 [ -9,0,-2 ] -9 
 [ -4,7,8 ] -11 [ -9,0,-2 ] -9 
 [ 6,-6,7 ] -11 [ -1,-8,6 ] -10 
 [ 6,-6,7 ] -11 [ -1,-8,6 ] -10 
 [ -1,9,6 ] -11 [ -4,-5,8 ] -10 
 [ -1,9,6 ] -11 [ -4,-5,8 ] -10 
 [ 9,-5,2 ] -10 [ 9,-5,2 ] -10 
< [ -2,-2,0 ] -3, [ -2,0,-2 ] -3, [ -1,3,-4 ] -5, [ -1,3,-4 ] -5, [ -1,7,-4 ] -8, [ -1,7,-4 ] -8, [ 5,3,-7 ] -9, [ 5,3,-7 ] -9, [ -9,0,-2 ] -9, [ -9,0,-2 ] -9, [ -1,-8,6 ] -10, [ -1,-8,6 ] -10, [ -4,-5,8 ] -10, [ -4,-5,8 ] -10, [ 9,-5,2 ] -10>