public static void main(String[] args) throws InterruptedException {
		NumericAlgorithm<Integer> na = new NumericAlgorithm<Integer>(1, new CircleProblem<Integer>(), 3);
		na.setAlgType(2);
		na.generateSolutions(10);
		
		for(OptimizationSolution<Integer> os : na.solutions()) {
			System.out.println(os.solutionDetails());
			System.out.println(os.getElm("1"));
		}
				
	}
	
[AbstractSolution.java]
	@Override
	public void setElm(E elm, String placeCode) {
		// TODO Auto-generated method stub
		int index = Integer.parseInt(placeCode);
		this.set(index, elm);
	}

	@Override
	public void placeElm(E elm, String placeCode) {
		// TODO Auto-generated method stub
		int index = Integer.parseInt(placeCode);
		this.add(index, elm);
	}

	@Override
	public String findElm(E elm) {
		// TODO Auto-generated method stub
		return ""+this.indexOf(elm);
	}

	@Override
	public E getElm(String placeCode) {
		// TODO Auto-generated method stub
		int index = Integer.parseInt(placeCode);
		return this.get(index);
	}
	
________________________________________________________
 [ -7,-8,2 ] -11
-8
 [ 7,2,-2 ] -8
2
 [ 9,0,-9 ] -13
0
 [ 3,1,-5 ] -6
1
 [ -7,8,-5 ] -12
8
 [ 9,-5,10 ] -14
-5
 [ 0,1,-7 ] -7
1
 [ 7,10,-5 ] -13
10
 [ -3,2,-8 ] -9
2
 [ 10,8,3 ] -13
8
__________________________________________________________

public static void main(String[] args) throws InterruptedException {
		NumericAlgorithm<Integer> na = new NumericAlgorithm<Integer>(1, new CircleProblem<Integer>(), 3);
		na.setAlgType(2);
		na.generateSolutions(10);
		
		for(OptimizationSolution<Integer> os : na.solutions()) {
			System.out.println(os.solutionDetails());
			System.out.println(os.getElm("1"));
			os.setElm(3, "1");
			System.out.println(os.solutionDetails());
			os.placeElm(4, "0");
			System.out.println(os.solutionDetails());
			System.out.println(os.findElm(3));
			System.out.println("------------");
		}
				
	}
	
__________________________________________________________
 [ 2,-9,6 ] -11
-9
 [ 2,3,6 ] -7
 [ 4,2,3,6 ] -8
2
------------
 [ 2,-10,5 ] -11
-10
 [ 2,3,5 ] -6
 [ 4,2,3,5 ] -7
2
------------
 [ 9,-3,-10 ] -14
-3
 [ 9,3,-10 ] -14
 [ 4,9,3,-10 ] -14
2
------------
 [ 10,8,-3 ] -13
8
 [ 10,3,-3 ] -11
 [ 4,10,3,-3 ] -12
2
------------
 [ -8,3,1 ] -9
3
 [ -8,3,1 ] -9
 [ 4,-8,3,1 ] -9
2
------------
 [ -2,5,5 ] -7
5
 [ -2,3,5 ] -6
 [ 4,-2,3,5 ] -7
2
------------
 [ 5,5,-2 ] -7
5
 [ 5,3,-2 ] -6
 [ 4,5,3,-2 ] -7
2
------------
 [ 8,-8,-2 ] -11
-8
 [ 8,3,-2 ] -9
 [ 4,8,3,-2 ] -10
2
------------
 [ 0,5,10 ] -11
5
 [ 0,3,10 ] -10
 [ 4,0,3,10 ] -11
2
------------
 [ -8,6,-8 ] -13
6
 [ -8,3,-8 ] -12
 [ 4,-8,3,-8 ] -12
2
------------