public static void main(String[] args) {
		NumericAlgorithm<Integer> na = new NumericAlgorithm<Integer>(1, new CircleProblem<Integer>(), 3, 0, 25, 1);
		
		na.generateSolutions(12);
		
		SolutionMatcher sm = SolutionMatcher.randomMatching(3);
		System.out.println(na.solutions());
		for(LinkedList<OptimizationSolution<?>> match : sm.genMatches(na.solutions())) {
			System.out.println(match);
		}
		
	}
	
______________________________________________________________________________
Results-1 ////////////////////////////////////////////////////////////////////
[[12, 24, 16], [15, 17, 0], [7, 25, 16], [5, 23, 5], [15, 16, 7], [19, 0, 13], [10, 25, 12], [6, 22, 16], [17, 22, 15], [16, 8, 16], [4, 9, 10], [9, 24, 13]]
[[15, 17, 0], [12, 24, 16], [7, 25, 16]]
[[15, 16, 7], [19, 0, 13], [5, 23, 5]]
[[17, 22, 15], [10, 25, 12], [4, 9, 10]]
[[6, 22, 16], [16, 8, 16], [9, 24, 13]]

Results-2 ////////////////////////////////////////////////////////////////////
[[22, 19, 11], [2, 20, 11], [4, 19, 24], [6, 15, 4], [2, 0, 6], [17, 2, 2], [12, 3, 16], [19, 20, 20], [12, 13, 12], [12, 14, 16], [6, 8, 18], [3, 3, 17]]
Exception in thread "main" java.lang.IndexOutOfBoundsException: Index: 2, Size: 2
	at java.util.LinkedList.checkElementIndex(Unknown Source)
	at java.util.LinkedList.get(Unknown Source)
	at Solution.randomMatching.genMatches(SolutionMatcher.java:40)
	at Test.Main.main(Main.java:23)

Results-3 ////////////////////////////////////////////////////////////////////	
Changed : at Solution.randomMatching.genMatches(SolutionMatcher.java:39) int index = r.nextInt(perMatch) -> int index = r.nextInt(perMatch-1);
Logic : it may be somehow going over bounds

[[3, 16, 13], [23, 15, 6], [11, 22, 12], [19, 11, 5], [18, 6, 3], [2, 25, 15], [22, 15, 22], [15, 19, 6], [22, 15, 0], [19, 2, 17], [8, 8, 22], [8, 11, 20]]
[[3, 16, 13], [11, 22, 12], [19, 11, 5]]
[[18, 6, 3], [23, 15, 6], [22, 15, 22]]
[[2, 25, 15], [22, 15, 0], [15, 19, 6]]
[[8, 8, 22], [19, 2, 17], [8, 11, 20]]

 Results-4 ////////////////////////////////////////////////////////////////////	
 [[25, 8, 11], [13, 5, 12], [19, 24, 24], [24, 6, 1], [13, 16, 4], [11, 5, 1], [6, 18, 9], [6, 17, 23], [8, 17, 12], [10, 22, 3], [21, 9, 4], [6, 8, 6]]
[[13, 5, 12], [19, 24, 24], [25, 8, 11]]
[[24, 6, 1], [13, 16, 4], [6, 18, 9]]
[[11, 5, 1], [8, 17, 12], [10, 22, 3]]
[[6, 17, 23], [21, 9, 4], [6, 8, 6]]
 
 Results-5 ////////////////////////////////////////////////////////////////////	
 [[3, 7, 24], [7, 4, 16], [10, 5, 1], [23, 20, 7], [18, 7, 15], [14, 25, 13], [8, 5, 9], [18, 15, 9], [23, 3, 17], [12, 17, 7], [2, 15, 3], [4, 13, 23]]
Exception in thread "main" java.lang.IndexOutOfBoundsException: Index: 1, Size: 1
	at java.util.LinkedList.checkElementIndex(Unknown Source)
	at java.util.LinkedList.get(Unknown Source)
	at Solution.randomMatching.genMatches(SolutionMatcher.java:40)
	at Test.Main.main(Main.java:23)
	
 Results-6 ////////////////////////////////////////////////////////////////////	
 Changed : at Solution.randomMatching.genMatches(SolutionMatcher.java:39) int index = r.nextInt(perMatch-1) -> int index = r.nextInt(Math.min(perMatch, indexedSolutions.size()));
 logic : it was pulling from indexedSolutions from places where it was too small to be pulled from
 
 [[1, 7, 12], [22, 14, 18], [20, 19, 12], [17, 5, 5], [22, 19, 16], [2, 22, 19], [24, 20, 16], [18, 6, 16], [0, 23, 23], [24, 14, 10], [18, 14, 22], [0, 15, 16]]
[[0, 15, 16], [24, 20, 16], [17, 5, 5]]
[[22, 14, 18], [20, 19, 12], [0, 23, 23]]
[[22, 19, 16], [2, 22, 19], [18, 6, 16]]
[[18, 14, 22], [24, 14, 10], [1, 7, 12]]

Results-7 ////////////////////////////////////////////////////////////////////	
[[11, 19, 23], [12, 0, 21], [19, 20, 6], [11, 18, 19], [11, 12, 25], [9, 18, 17], [19, 20, 23], [1, 9, 2], [3, 8, 5], [18, 15, 2], [18, 20, 0], [5, 3, 11]]
[[19, 20, 6], [11, 19, 23], [18, 20, 0]]
[[18, 15, 2], [9, 18, 17], [19, 20, 23]]
[[1, 9, 2], [11, 18, 19], [3, 8, 5]]
[[12, 0, 21], [5, 3, 11], [11, 12, 25]]

Results-8 ////////////////////////////////////////////////////////////////////	
[[20, 3, 4], [15, 15, 6], [9, 14, 2], [13, 24, 7], [11, 17, 6], [22, 15, 9], [17, 15, 22], [9, 5, 23], [16, 24, 13], [8, 15, 12], [1, 10, 23], [19, 16, 5]]
[[15, 15, 6], [9, 14, 2], [20, 3, 4]]
[[13, 24, 7], [11, 17, 6], [17, 15, 22]]
[[22, 15, 9], [16, 24, 13], [9, 5, 23]]
[[8, 15, 12], [19, 16, 5], [1, 10, 23]]

Results-9 ////////////////////////////////////////////////////////////////////	
[[8, 15, 16], [20, 5, 17], [8, 13, 7], [19, 25, 14], [7, 17, 3], [14, 25, 23], [18, 7, 4], [0, 15, 17], [17, 9, 2], [1, 13, 13], [14, 20, 24], [11, 18, 23]]
[[20, 5, 17], [19, 25, 14], [8, 15, 16]]
[[7, 17, 3], [8, 13, 7], [14, 25, 23]]
[[0, 15, 17], [1, 13, 13], [18, 7, 4]]
[[11, 18, 23], [14, 20, 24], [17, 9, 2]]

Results-10 ////////////////////////////////////////////////////////////////////	
[[5, 16, 17], [8, 1, 16], [9, 14, 2], [0, 2, 21], [24, 4, 24], [0, 25, 0], [18, 19, 14], [1, 6, 13], [8, 19, 20], [2, 14, 6], [1, 21, 20], [11, 14, 9]]
[[5, 16, 17], [8, 1, 16], [24, 4, 24]]
[[0, 2, 21], [0, 25, 0], [1, 6, 13]]
[[8, 19, 20], [2, 14, 6], [18, 19, 14]]
[[9, 14, 2], [1, 21, 20], [11, 14, 9]]

______________________________________________________________________________
public static void main(String[] args) {
		NumericAlgorithm<Integer> na = new NumericAlgorithm<Integer>(1, new CircleProblem<Integer>(), 3, 0, 25, 1);
		
		na.generateSolutions(10); //Tests for when there are more solutions than will be matched
		
		SolutionMatcher sm = SolutionMatcher.randomMatching(3);
		System.out.println(na.solutions());
		for(LinkedList<OptimizationSolution<?>> match : sm.genMatches(na.solutions())) {
			System.out.println(match);
		}
		
	}
______________________________________________________________________________
Results-11 ////////////////////////////////////////////////////////////////////	
[[23, 12, 3], [17, 1, 11], [11, 20, 4], [5, 13, 17], [20, 15, 16], [15, 25, 4], [25, 18, 25], [2, 17, 4], [20, 7, 23], [14, 7, 6]]
[[17, 1, 11], [11, 20, 4], [23, 12, 3]]
[[5, 13, 17], [20, 15, 16], [25, 18, 25]]
[[2, 17, 4], [15, 25, 4], [20, 7, 23]]

Results-12 ////////////////////////////////////////////////////////////////////	
[[6, 14, 14], [15, 21, 15], [18, 13, 22], [17, 21, 2], [9, 18, 24], [24, 25, 12], [7, 9, 7], [18, 19, 3], [25, 21, 6], [17, 9, 3]]
[[6, 14, 14], [18, 13, 22], [17, 21, 2]]
[[9, 18, 24], [24, 25, 12], [18, 19, 3]]
[[25, 21, 6], [15, 21, 15], [7, 9, 7]]

Results-13 ////////////////////////////////////////////////////////////////////	
[[7, 24, 0], [20, 15, 21], [20, 5, 3], [19, 2, 23], [11, 0, 16], [24, 0, 21], [2, 7, 3], [14, 4, 17], [15, 5, 14], [0, 18, 21]]
[[20, 15, 21], [7, 24, 0], [11, 0, 16]]
[[20, 5, 3], [19, 2, 23], [24, 0, 21]]
[[15, 5, 14], [2, 7, 3], [0, 18, 21]]

Results-14 ////////////////////////////////////////////////////////////////////	
[[8, 5, 20], [4, 25, 13], [5, 8, 15], [23, 18, 15], [11, 15, 21], [15, 3, 9], [7, 10, 11], [18, 8, 11], [13, 3, 15], [24, 14, 0]]
[[5, 8, 15], [23, 18, 15], [4, 25, 13]]
[[8, 5, 20], [7, 10, 11], [11, 15, 21]]
[[13, 3, 15], [15, 3, 9], [18, 8, 11]]

Results-15 ////////////////////////////////////////////////////////////////////	
[[10, 13, 2], [16, 6, 6], [22, 7, 19], [17, 6, 23], [10, 1, 24], [25, 25, 3], [22, 24, 3], [7, 15, 14], [7, 2, 24], [2, 25, 11]]
[[16, 6, 6], [10, 13, 2], [10, 1, 24]]
[[17, 6, 23], [22, 7, 19], [22, 24, 3]]
[[25, 25, 3], [7, 2, 24], [2, 25, 11]]